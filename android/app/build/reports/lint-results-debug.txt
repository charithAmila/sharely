/Users/charithdissanayaka/Projects/Sharely/android/app/src/main/AndroidManifest.xml:63: Warning: READ_EXTERNAL_STORAGE is deprecated (and is not granted) when targeting Android 13+. If you need to query or interact with MediaStore or media files on the shared storage, you should instead use one or more new storage permissions: READ_MEDIA_IMAGES, READ_MEDIA_VIDEO or READ_MEDIA_AUDIO. [ScopedStorage]
    <uses-permission android:name="android.permission.READ_EXTERNAL_STORAGE" />
                                   ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

   Explanation for issues of type "ScopedStorage":
   Scoped storage is enforced on Android 10+ (or Android 11+ if using
   requestLegacyExternalStorage). In particular, WRITE_EXTERNAL_STORAGE will
   no longer provide write access to all files; it will provide the equivalent
   of READ_EXTERNAL_STORAGE instead.

   As of Android 13, if you need to query or interact with MediaStore or media
   files on the shared storage, you should be using instead one or more new
   storage permissions:
   * android.permission.READ_MEDIA_IMAGES
   * android.permission.READ_MEDIA_VIDEO
   * android.permission.READ_MEDIA_AUDIO

   and then add maxSdkVersion="33" to the older permission. See the developer
   guide for how to do this:
   https://developer.android.com/about/versions/13/behavior-changes-13#granula
   r-media-permissions

   The MANAGE_EXTERNAL_STORAGE permission can be used to manage all files, but
   it is rarely necessary and most apps on Google Play are not allowed to use
   it. Most apps should instead migrate to use scoped storage. To modify or
   delete files, apps should request write access from the user as described
   at https://goo.gle/android-mediastore-createwriterequest.

   To learn more, read these resources: Play policy:
   https://goo.gle/policy-storage-help Allowable use cases:
   https://goo.gle/policy-storage-usecases

   https://goo.gle/android-storage-usecases

/Users/charithdissanayaka/Projects/Sharely/android/app/src/main/AndroidManifest.xml:62: Warning: <uses-permission> tag appears after <application> tag [ManifestOrder]
    <uses-permission android:name="android.permission.INTERNET" />
     ~~~~~~~~~~~~~~~

   Explanation for issues of type "ManifestOrder":
   The <application> tag should appear after the elements which declare which
   version you need, which features you need, which libraries you need, and so
   on. In the past there have been subtle bugs (such as themes not getting
   applied correctly) when the <application> tag appears before some of these
   other elements, so it's best to order your manifest in the logical
   dependency order.

/Users/charithdissanayaka/Projects/Sharely/android/app/build.gradle:35: Warning: A newer version of androidx.appcompat:appcompat than 1.6.1 is available: 1.7.0 [GradleDependency]
    implementation "androidx.appcompat:appcompat:$androidxAppCompatVersion"
                   ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
/Users/charithdissanayaka/Projects/Sharely/android/app/build.gradle:40: Warning: A newer version of androidx.test.ext:junit than 1.1.5 is available: 1.2.1 [GradleDependency]
    androidTestImplementation "androidx.test.ext:junit:$androidxJunitVersion"
                              ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
/Users/charithdissanayaka/Projects/Sharely/android/app/build.gradle:41: Warning: A newer version of androidx.test.espresso:espresso-core than 3.5.1 is available: 3.6.1 [GradleDependency]
    androidTestImplementation "androidx.test.espresso:espresso-core:$androidxEspressoCoreVersion"
                              ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
/Users/charithdissanayaka/Projects/Sharely/android/app/build.gradle:44: Warning: A newer version of com.google.firebase:firebase-bom than 32.3.1 is available: 33.7.0 [GradleDependency]
    implementation platform('com.google.firebase:firebase-bom:32.3.1')
                            ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
/Users/charithdissanayaka/Projects/Sharely/android/app/build.gradle:47: Warning: A newer version of com.google.android.material:material than 1.9.0 is available: 1.12.0 [GradleDependency]
    implementation 'com.google.android.material:material:1.9.0'
                   ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

   Explanation for issues of type "GradleDependency":
   This detector looks for usages of libraries where the version you are using
   is not the current stable release. Using older versions is fine, and there
   are cases where you deliberately want to stick with an older version.
   However, you may simply not be aware that a more recent version is
   available, and that is what this lint check helps find.

/Users/charithdissanayaka/Projects/Sharely/android/app/src/main/res/layout/activity_main.xml:2: Warning: The resource R.layout.activity_main appears to be unused [UnusedResources]
<androidx.coordinatorlayout.widget.CoordinatorLayout xmlns:android="http://schemas.android.com/apk/res/android"
^
/Users/charithdissanayaka/Projects/Sharely/android/app/src/main/res/xml/config.xml:2: Warning: The resource R.xml.config appears to be unused [UnusedResources]
<widget version="1.0.0" xmlns="http://www.w3.org/ns/widgets" xmlns:cdv="http://cordova.apache.org/ns/1.0">
^
/Users/charithdissanayaka/Projects/Sharely/android/app/src/main/res/drawable/ic_launcher_background.xml:2: Warning: The resource R.drawable.ic_launcher_background appears to be unused [UnusedResources]
<vector xmlns:android="http://schemas.android.com/apk/res/android"
^
/Users/charithdissanayaka/Projects/Sharely/android/app/src/main/res/drawable-v24/ic_launcher_foreground.xml:1: Warning: The resource R.drawable.ic_launcher_foreground appears to be unused [UnusedResources]
<vector xmlns:android="http://schemas.android.com/apk/res/android"
^
/Users/charithdissanayaka/Projects/Sharely/android/app/src/main/res/values/strings.xml:5: Warning: The resource R.string.package_name appears to be unused [UnusedResources]
    <string name="package_name">io.sharely.app</string>
            ~~~~~~~~~~~~~~~~~~~
/Users/charithdissanayaka/Projects/Sharely/android/app/src/main/res/values/strings.xml:6: Warning: The resource R.string.custom_url_scheme appears to be unused [UnusedResources]
    <string name="custom_url_scheme">io.sharely.app</string>
            ~~~~~~~~~~~~~~~~~~~~~~~~
/Users/charithdissanayaka/Projects/Sharely/android/app/src/main/res/values/styles.xml:12: Warning: The resource R.style.AppTheme_NoActionBar appears to be unused [UnusedResources]
    <style name="AppTheme.NoActionBar" parent="Theme.AppCompat.DayNight.NoActionBar">
           ~~~~~~~~~~~~~~~~~~~~~~~~~~~

   Explanation for issues of type "UnusedResources":
   Unused resources make applications larger and slow down builds.


   The unused resource check can ignore tests. If you want to include
   resources that are only referenced from tests, consider packaging them in a
   test source set instead.

   You can include test sources in the unused resource check by setting the
   system property lint.unused-resources.include-tests =true, and to exclude
   them (usually for performance reasons), use
   lint.unused-resources.exclude-tests =true.
   ,

/Users/charithdissanayaka/Projects/Sharely/android/app/src/main/res/mipmap-anydpi-v26/ic_launcher.xml:2: Warning: The application adaptive icon is missing a monochrome tag [MonochromeLauncherIcon]
<adaptive-icon xmlns:android="http://schemas.android.com/apk/res/android">
^
/Users/charithdissanayaka/Projects/Sharely/android/app/src/main/res/mipmap-anydpi-v26/ic_launcher_round.xml:2: Warning: The application adaptive roundIcon is missing a monochrome tag [MonochromeLauncherIcon]
<adaptive-icon xmlns:android="http://schemas.android.com/apk/res/android">
^

   Explanation for issues of type "MonochromeLauncherIcon":
   If android:roundIcon and android:icon are both in your manifest, you must
   either remove the reference to android:roundIcon if it is not needed; or,
   supply the monochrome icon in the drawable defined by the android:roundIcon
   and android:icon attribute.

   For example, if android:roundIcon and android:icon are both in the
   manifest, a launcher might choose to use android:roundIcon over
   android:icon to display the adaptive app icon. Therefore, your themed
   application iconwill not show if your monochrome attribute is not also
   specified in android:roundIcon.

/Users/charithdissanayaka/Projects/Sharely/android/app/src/main/res/drawable-land-xxxhdpi/splash.png: Warning: The image splash.png varies significantly in its density-independent (dip) size across the various density versions: drawable-land-hdpi/splash.png: 533x320 dp (800x480 px), drawable-land-mdpi/splash.png: 480x320 dp (480x320 px), drawable-land-xhdpi/splash.png: 640x360 dp (1280x720 px), drawable-land-xxhdpi/splash.png: 533x320 dp (1600x960 px), drawable-land-xxxhdpi/splash.png: 480x320 dp (1920x1280 px) [IconDipSize]

   Explanation for issues of type "IconDipSize":
   Checks the all icons which are provided in multiple densities, all compute
   to roughly the same density-independent pixel (dip) size. This catches
   errors where images are either placed in the wrong folder, or icons are
   changed to new sizes but some folders are forgotten.

/Users/charithdissanayaka/Projects/Sharely/android/app/src/main/res/drawable/splash.png: Warning: The splash.png icon has identical contents in the following configuration folders: drawable-land-mdpi, drawable [IconDuplicatesConfig]

   Explanation for issues of type "IconDuplicatesConfig":
   If an icon is provided under different configuration parameters such as
   drawable-hdpi or -v11, they should typically be different. This detector
   catches cases where the same icon is provided in different configuration
   folder which is usually not intentional.

/Users/charithdissanayaka/Projects/Sharely/android/app/src/main/res/drawable/splash.png: Warning: Found bitmap drawable res/drawable/splash.png in densityless folder [IconLocation]

   Explanation for issues of type "IconLocation":
   The res/drawable folder is intended for density-independent graphics such
   as shapes defined in XML. For bitmaps, move it to drawable-mdpi and
   consider providing higher and lower resolution versions in drawable-ldpi,
   drawable-hdpi and drawable-xhdpi. If the icon really is density independent
   (for example a solid color) you can place it in drawable-nodpi.

   https://developer.android.com/guide/practices/screens_support.html

/Users/charithdissanayaka/Projects/Sharely/android/app/src/main/res/layout/activity_share_handler.xml:17: Warning: This text field does not specify an inputType [TextFields]
    <EditText
     ~~~~~~~~

   Explanation for issues of type "TextFields":
   Providing an inputType attribute on a text field improves usability because
   depending on the data to be input, optimized keyboards can be shown to the
   user (such as just digits and parentheses for a phone number). 

   The lint detector also looks at the id of the view, and if the id offers a
   hint of the purpose of the field (for example, the id contains the phrase
   phone or email), then lint will also ensure that the inputType contains the
   corresponding type attributes.

   If you really want to keep the text field generic, you can suppress this
   warning by setting inputType="text".

/Users/charithdissanayaka/Projects/Sharely/android/app/src/main/res/layout/activity_share_handler.xml:17: Warning: Missing autofillHints attribute [Autofill]
    <EditText
     ~~~~~~~~

   Explanation for issues of type "Autofill":
   Specify an autofillHints attribute when targeting SDK version 26 or higher
   or explicitly specify that the view is not important for autofill. Your app
   can help an autofill service classify the data correctly by providing the
   meaning of each view that could be autofillable, such as views representing
   usernames, passwords, credit card fields, email addresses, etc.

   The hints can have any value, but it is recommended to use predefined
   values like 'username' for a username or 'creditCardNumber' for a credit
   card number. For a list of all predefined autofill hint constants, see the
   AUTOFILL_HINT_ constants in the View reference at
   https://developer.android.com/reference/android/view/View.html.

   You can mark a view unimportant for autofill by specifying an
   importantForAutofill attribute on that view or a parent view. See
   https://developer.android.com/reference/android/view/View.html#setImportant
   ForAutofill(int).

   https://developer.android.com/guide/topics/text/autofill.html

/Users/charithdissanayaka/Projects/Sharely/android/app/src/main/res/layout/activity_share_handler.xml:13: Warning: Hardcoded string "Select tags and share your content", should use @string resource [HardcodedText]
        android:text="Select tags and share your content"
        ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
/Users/charithdissanayaka/Projects/Sharely/android/app/src/main/res/layout/activity_share_handler.xml:21: Warning: Hardcoded string "Enter tags", should use @string resource [HardcodedText]
        android:hint="Enter tags"
        ~~~~~~~~~~~~~~~~~~~~~~~~~
/Users/charithdissanayaka/Projects/Sharely/android/app/src/main/res/layout/activity_share_handler.xml:28: Warning: Hardcoded string "Share", should use @string resource [HardcodedText]
        android:text="Share" />
        ~~~~~~~~~~~~~~~~~~~~

   Explanation for issues of type "HardcodedText":
   Hardcoding text attributes directly in layout files is bad for several
   reasons:

   * When creating configuration variations (for example for landscape or
   portrait) you have to repeat the actual text (and keep it up to date when
   making changes)

   * The application cannot be translated to other languages by just adding
   new translations for existing string resources.

   There are quickfixes to automatically extract this hardcoded string into a
   resource lookup.

0 errors, 24 warnings
